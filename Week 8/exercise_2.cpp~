#include <list>
#include <string>
#include <algorithm>
#include <stdio.h>

class staff {
  bool department;
  char name[];
  
  void joinDept() {

    department = 1;
    department::staff_list.push_back(*this);
    
  }
  void leaveDept() {

    department = 0;
    department::staff_list.erase(std::remove(department::staff_list.begin(), department::staff_list.end(), *this), department::staff_list.end());
    AcademicDepartment::staff_list.erase(std::remove(AcademicDepartment::staff_list.begin(), AcademicDepartment::staff_list.end(), *this), AcademicDepartment::staff_list.end());
    NoncademicDepartment::staff_list.erase(std::remove(NoncademicDepartment::staff_list.begin(), NoncademicDepartment::staff_list.end(), *this), NoncademicDepartment::staff_list.end());
  }
};

class department {
  struct name {
    enum {academic_department, non} department;
    staff at_least_one_staff;
  };
  struct location {
    long double coordinates[3];
    staff at_least_one_staff;
  };
  std::list<staff> staff_list;
  
  friend void staff::joinDept();
  friend void staff::leaveDept();
};

class AcademicDepartment : department {
  name.department = academic_department;
  size_t number_of_courses;

  friend void staff::joinDept();
  friend void staff::leaveDept();
};

class NoncademicDepartment : department {
  name.department = non;
  size_t number_of_services;

  friend void staff::joinDept();
  friend void staff::leaveDept();
};

int main(int argc, char **argv) {
  setbuf(stdout, NULL);

  
