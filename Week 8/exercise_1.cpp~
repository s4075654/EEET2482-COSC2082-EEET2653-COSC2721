#include <vector>

class Book {
private:
  ssize_t availableCopies;
  std::vector<char> **namesOfBorrowers;
  char title[];

public:
  Book() {};

  friend void User::doBorrow(Book &abook);
  friend void User::doReturn(Book &abook);
};

class User {
  std::vector<Book> *borrowedBooks;
  char name[];

public:
  User() {};
  bool doBorrow(Book &abook) {
    
    borrowedBooks.push_back(abook);
    namesOfBorrowers.push_back(abook.title);
    --abook.availableCopies;

    return;
  }    
  void doReturn(Book &abook) {
    
    borrowedBooks.erase(abook);
    namesOfBorrowers.erase(abook.title);
    ++abook.availableCopies;
  }
};

class SuperUser {
  bool doBorrow(Book &book1, Book &book2) {
    friend void d();
    
    return;
  }
};

void b() {
  std::vector<Book> *three_book_objects;

  for(unsigned char book_object = 0; book_object < 3; ++book_object) {
    *(three_book_objects + book_object) = new Book;
  }
  
  User user_object_one, user_object_two;

  user_object_one.doBorrow(three_book_objects.at(2));
  user_object_two.doReturn(three_book_objects.at(2));
}

void d() {
  SuperUser the_superuser;
  
  the_superuser.doBorrow(three_book_object.at(2), three_book_object.at(2));
}

int main(int argc, char **argv) {

  b();
  d();

  return(0);
}
